generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String     @unique
  password      String?
  image         String?
  bio           String?
  role          Role       @default(USER)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  emailVerified DateTime?
  aiPrompts     AIPrompt[]
  accounts      Account[]
  comments      Comment[]
  posts         Post[]
  sessions      Session[]
}

model Post {
  id            String     @id @default(cuid())
  title         String
  content       String
  summary       String?
  published     Boolean    @default(false)
  slug          String     @unique
  featuredImage String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  authorId      String
  aiGenerated   Boolean    @default(false)
  comments      Comment[]
  author        User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  categories    Category[] @relation("CategoryToPost")
  tags          Tag[]      @relation("PostToTag")
}

model Comment {
  id        String    @id @default(cuid())
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  authorId  String
  postId    String
  parentId  String?
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parent    Comment?  @relation("CommentToComment", fields: [parentId], references: [id])
  children  Comment[] @relation("CommentToComment")
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Category {
  id          String  @id @default(cuid())
  name        String  @unique
  slug        String  @unique
  description String?
  posts       Post[]  @relation("CategoryToPost")
}

model Tag {
  id    String @id @default(cuid())
  name  String @unique
  slug  String @unique
  posts Post[] @relation("PostToTag")
}

model AIPrompt {
  id        String   @id @default(cuid())
  prompt    String
  response  String
  createdAt DateTime @default(now())
  userId    String
  type      AIType
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AIConfig {
  id          String  @id @default(cuid())
  name        String  @unique
  apiKey      String?
  model       String  @default("gpt-3.5-turbo")
  temperature Float   @default(0.7)
  maxTokens   Int     @default(2000)
  active      Boolean @default(true)
}

enum Role {
  USER
  ADMIN
}

enum AIType {
  CONTENT_GENERATOR
  SUMMARIZER
  HEADLINE_GENERATOR
  SEO_OPTIMIZER
  IMAGE_PROMPT
}
